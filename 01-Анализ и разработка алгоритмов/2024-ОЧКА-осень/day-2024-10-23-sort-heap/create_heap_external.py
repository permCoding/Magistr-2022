def create_heap(arr):  # у max-кучи - на вершине max
    heap = []  # создали пустую кучу - дополнительная память
    for item in arr:  # все элементы исходной коллекции
        heap.append(item)  # по одному добавляем в кучу
        pos = len(heap) - 1  # у нов элемента пока последняя позиция
        while pos > 0:  # поднимаем его к вершине пока есть возможность
            pos_parent = (pos - 1) // 2
            if heap[pos_parent] >= heap[pos]: break  # если родитель больше
            heap[pos_parent], heap[pos] = heap[pos], heap[pos_parent]
            pos = pos_parent
    return heap


# lst = [1, 4, 5, 2]
lst = [1, 4, 5, 2, 0]
print(create_heap(lst))


"""
В Python встроенный тип данных list реализован как как массив динамической длины.  
Не как односвязный или двусвязный список!  
Это значит, что он представляет собой непрерывный участок памяти, где элементы хранятся последовательно.  
На самом деле в списке хранятся только ссылки на объекты, даже если это просто целые числа.  
Такой подход обеспечивает быстрый доступ к элементам по индексу - O(1).  

Только вставка или удаление элементов в списке может быть неэффективной с асимптотикой O(n), так как требуется сдвиг элементов.

"""